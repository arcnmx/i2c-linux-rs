var searchIndex = {};
searchIndex["i2c_linux"] = {"doc":"A safe interface to the Linux I2C and SMBus userspace subsystem.","items":[[4,"ReadWrite","i2c_linux","`i2c_smbus_xfer` read or write markers",null,null],[13,"Read","","",0,null],[13,"Write","","",0,null],[3,"Functionality","","To determine what functionality is present",null,null],[3,"ReadFlags","","Flags to work around device quirks.",null,null],[3,"WriteFlags","","Flags to work around device quirks.",null,null],[3,"I2c","","A safe wrapper around an I2C device.",null,null],[4,"Message","","Part of a combined I2C transaction.",null,null],[13,"Read","","I2C read command",1,null],[12,"address","i2c_linux::Message","The slave address of the device to read from.",1,null],[12,"data","","A data buffer to read into.",1,null],[12,"flags","","Additional flags can modify the operation to work around device quirks.",1,null],[13,"Write","i2c_linux","I2C write command",1,null],[12,"address","i2c_linux::Message","The slave address of the device to write to.",1,null],[12,"data","","The data to write.",1,null],[12,"flags","","Additional flags can modify the operation to work around device quirks.",1,null],[11,"len","i2c_linux","Byte length of the message data buffer.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"address","","Address of the message's slave.",1,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"readflags"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"readflags"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"RECEIVE_LEN","","The first received byte will indicate the remaining length of the transfer.",2,null],[18,"NACK","","NACK bit is generated for this read.",2,null],[18,"REVERSE_RW","","Flips the meaning of the read/write address bit for misbehaving devices.",2,null],[18,"NO_START","","Do not generate a START condition or the address start byte. When used for the first message, a START condition is still generated.",2,null],[18,"STOP","","Force a STOP condition after this message.",2,null],[11,"empty","","Returns an empty set of flags.",2,{"inputs":[],"output":{"name":"readflags"}}],[11,"all","","Returns the set containing all flags.",2,{"inputs":[],"output":{"name":"readflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",2,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",2,{"inputs":[{"name":"u16"}],"output":{"generics":["readflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",2,{"inputs":[{"name":"u16"}],"output":{"name":"readflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",2,{"inputs":[{"name":"self"},{"name":"readflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"bitor_assign","","Adds the set of flags.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",2,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",2,{"inputs":[{"name":"self"}],"output":{"name":"readflags"}}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"readflags"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"writeflags"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"writeflags"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IGNORE_NACK","","Treat NACK as an ACK and prevent it from interrupting the transfer.",3,null],[18,"REVERSE_RW","","Flips the meaning of the read/write address bit for misbehaving devices.",3,null],[18,"NO_START","","Do not generate a START condition or the address start byte. When used for the first message, a START condition is still generated.",3,null],[18,"STOP","","Force a STOP condition after this message.",3,null],[11,"empty","","Returns an empty set of flags.",3,{"inputs":[],"output":{"name":"writeflags"}}],[11,"all","","Returns the set containing all flags.",3,{"inputs":[],"output":{"name":"writeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",3,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",3,{"inputs":[{"name":"u16"}],"output":{"generics":["writeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",3,{"inputs":[{"name":"u16"}],"output":{"name":"writeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",3,{"inputs":[{"name":"self"},{"name":"writeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"bitor_assign","","Adds the set of flags.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",3,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",3,{"inputs":[{"name":"self"}],"output":{"name":"writeflags"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"writeflags"}}],[11,"from_path","","Open an I2C device",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Creates a new I2C handle with the given file descriptor",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_inner","","Consumes the I2C handle to return the inner file descriptor.",4,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"inner_ref","","Borrows the inner file descriptor.",4,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"inner_mut","","Mutably borrows the inner file descriptor.",4,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"as_raw_fd","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"into_raw_fd","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",4,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[11,"i2c_set_retries","","Sets the number of times to retry communication before failing.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"i2c_set_timeout","","Sets a timeout for I2C operations",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"smbus_set_slave_address","","Set the slave address to communicate with.",4,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"smbus_set_pec","","Enable or disable SMBus Packet Error Checking.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"i2c_functionality","","Retrieve the capabilities of the I2C device. These should be checked before attempting to use certain SMBus commands or I2C flags.",4,{"inputs":[{"name":"self"}],"output":{"generics":["functionality"],"name":"result"}}],[11,"i2c_transfer","","Executes a queue of I2C transfers, separated by repeat START conditions. Data buffers are truncated to the actual read length on completion.",4,null],[11,"smbus_write_quick","","Sends a single bit to the device, in the place of the Rd/Wr address bit.",4,{"inputs":[{"name":"self"},{"name":"readwrite"}],"output":{"name":"result"}}],[11,"smbus_read_byte","","Deads a single byte from a device without specifying a register.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"smbus_write_byte","","Sends a single byte to a device.",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"smbus_read_byte_data","","Reads a single byte from a device from the designated register.",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"result"}}],[11,"smbus_write_byte_data","","Writes a single byte to a device to the designated register.",4,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"result"}}],[11,"smbus_read_word_data","","Reads a 16-bit word from the device register.",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u16"],"name":"result"}}],[11,"smbus_write_word_data","","Writes a 16-bit word to the device register.",4,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"name":"result"}}],[11,"smbus_process_call","","Selects a device register, sends a 16-bit word to it, and read 16-bits of data in return.",4,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"generics":["u16"],"name":"result"}}],[11,"smbus_read_block_data","","Read up to 32 bytes from the designated device register.",4,null],[11,"smbus_write_block_data","","Write up to 32 bytes to the designated device register.",4,null],[11,"smbus_block_process_call","","Sends up to 31 bytes of data to the designated device register, and reads up to 31 bytes in return.",4,null],[11,"i2c_read_block_data","","Reads a block of bytes from the designated device register.",4,null],[11,"i2c_write_block_data","","Writes a block of bytes from the designated device register.",4,null],[11,"read","","",4,null],[11,"write","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"functionality"}}],[11,"extend","","",5,null],[11,"sub","","Returns the set difference of the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"functionality"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"smbusreadwrite"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"smbusreadwrite"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"ordering"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"smbusreadwrite"}],"output":{"name":"ordering"}}],[11,"bitxor_assign","","Toggles the set of flags.",5,null],[11,"not","","Returns the complement of this set of flags.",5,{"inputs":[{"name":"self"}],"output":{"name":"functionality"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitor_assign","","Adds the set of flags.",5,null],[11,"from_iter","","",5,{"inputs":[{"name":"t"}],"output":{"name":"functionality"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sub_assign","","Disables all flags enabled in the set.",5,null],[11,"bitor","","Returns the union of the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"functionality"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"functionality"}}],[11,"hash","","",0,null],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"functionality"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"smbusreadwrite"}}],[18,"I2C","","",5,null],[18,"TENBIT_ADDR","","",5,null],[18,"PROTOCOL_MANGLING","","I2C_M_IGNORE_NAK etc.",5,null],[18,"SMBUS_PEC","","",5,null],[18,"NO_START","","I2C_M_NOSTART",5,null],[18,"SLAVE","","",5,null],[18,"SMBUS_BLOCK_PROC_CALL","","SMBus 2.0",5,null],[18,"SMBUS_QUICK","","",5,null],[18,"SMBUS_READ_BYTE","","",5,null],[18,"SMBUS_WRITE_BYTE","","",5,null],[18,"SMBUS_READ_BYTE_DATA","","",5,null],[18,"SMBUS_WRITE_BYTE_DATA","","",5,null],[18,"SMBUS_READ_WORD_DATA","","",5,null],[18,"SMBUS_WRITE_WORD_DATA","","",5,null],[18,"SMBUS_PROC_CALL","","",5,null],[18,"SMBUS_READ_BLOCK_DATA","","",5,null],[18,"SMBUS_WRITE_BLOCK_DATA","","",5,null],[18,"SMBUS_READ_I2C_BLOCK","","I2C-like block xfer",5,null],[18,"SMBUS_WRITE_I2C_BLOCK","","w/ 1-byte reg. addr.",5,null],[18,"SMBUS_HOST_NOTIFY","","",5,null],[18,"SMBUS_BYTE","","",5,null],[18,"SMBUS_BYTE_DATA","","",5,null],[18,"SMBUS_WORD_DATA","","",5,null],[18,"SMBUS_BLOCK_DATA","","",5,null],[18,"SMBUS_I2C_BLOCK","","",5,null],[18,"SMBUS_EMUL","","",5,null],[11,"empty","","Returns an empty set of flags.",5,{"inputs":[],"output":{"name":"functionality"}}],[11,"all","","Returns the set containing all flags.",5,{"inputs":[],"output":{"name":"functionality"}}],[11,"bits","","Returns the raw value of the flags currently stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",5,{"inputs":[{"name":"u32"}],"output":{"generics":["functionality"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",5,{"inputs":[{"name":"u32"}],"output":{"name":"functionality"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,{"inputs":[{"name":"self"},{"name":"functionality"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",5,null],[11,"remove","","Removes the specified flags in-place.",5,null],[11,"toggle","","Toggles the specified flags in-place.",5,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",5,null]],"paths":[[4,"ReadWrite"],[4,"Message"],[3,"ReadFlags"],[3,"WriteFlags"],[3,"I2c"],[3,"Functionality"]]};
initSearch(searchIndex);
